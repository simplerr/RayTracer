#version 450

/*
	http://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection
	https://github.com/LWJGL/lwjgl3-wiki/wiki/2.6.2.-Ray-tracing-with-OpenGL-Compute-Shaders-%28Part-II%29
	http://ray-tracing-conept.blogspot.se/2015/01/ray-box-intersection-and-normal.html
*/

uniform float time;

layout(binding = 0, rgba8) uniform image2D framebuffer;

layout (local_size_x = 16, local_size_y = 16) in;

uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;

// Light source
struct Light {
	vec3 position;
	vec3 direction;
	vec3 color;
};

struct Box {
	vec3 min;
	vec3 max;
};

struct Sphere {
	vec3 center;
	float radius;
};

#define NUM_BOXES 2
#define NUM_SPHERES 2
#define NUM_LIGHTS 1
#define MAX_SCENE_BOUNDS 100.0

const Box boxes[] = {
	/* The ground */
	{vec3(-5.0, -0.1, -5.0), vec3(5.0, 0.0, 5.0)},
	/* Box in the middle */
	{vec3(-0.5, 0.0, -0.5), vec3(0.5, 1.0, 0.5)}
};

const Sphere spheres[] = {
	{vec3(1, 3, 1), 1},
	{vec3(3, 1, 1), 2}
};

const Light lights[] = {
	{vec3(30, 30, 30), vec3(0, -1, 0), vec3(1, 1, 1)},
	{vec3(30, 30, 30), vec3(1, 0, 0), vec3(0, 1, 0)}
};

struct hitinfo {
	vec2 lambda;
	int bi;
};

vec2 intersectBox(vec3 origin, vec3 dir, const Box b) {
	vec3 tMin = (b.min - origin) / dir;
	vec3 tMax = (b.max - origin) / dir;
	vec3 t1 = min(tMin, tMax);
	vec3 t2 = max(tMin, tMax);
	float tNear = max(max(t1.x, t1.y), t1.z);
	float tFar = min(min(t2.x, t2.y), t2.z);
	return vec2(tNear, tFar);
}

bool intersectBoxes(vec3 origin, vec3 dir, out hitinfo info) {
	float closest = MAX_SCENE_BOUNDS;
	bool found = false;
	for (int i = 0; i < NUM_BOXES; i++) {
		vec2 lambda = intersectBox(origin, dir, boxes[i]);
		if (lambda.x > 0.0 && lambda.x < lambda.y && lambda.x < closest) {
			info.lambda = lambda;
			info.bi = i;
			closest = lambda.x;
			found = true;
		}
	}
	return found;
}

bool intersectSpheres(vec3 origin, vec3 dir, out hitinfo info) {
	float closest = MAX_SCENE_BOUNDS;
	bool found = false;
	for (int i = 0; i < NUM_SPHERES; i++) 
	{
		float t0, t1;

		// geometric solution
        vec3 L = spheres[i].center - origin; 
        float tca = dot(L, dir); 
        if (tca < 0) 
			continue;

        float d2 = dot(L, L) - tca * tca; 

        if (d2 > pow(spheres[i].radius, 2)) 
			continue;

        float thc = sqrt(pow(spheres[i].radius, 2) - d2); 
        t0 = tca - thc; 
        t1 = tca + thc; 

		if(t0 < 0)
		{
			float tmp = t0;
			t0 = t1;
			t1 = tmp;

			if(t0 < 0)
				continue;
		}

		// Is it the closest sphere?
		if(t0 > 0.0 && t0 < t1 && t0 < closest) {
			info.lambda = vec2(t0, t1);
			info.bi = i;
			closest = t0;
		}

		found = true;
	}

	return found;
}

// Calculates the normal at the intersection point between a ray and a box
vec3 calculateBoxNormal(vec3 hitpoint, int box_index)
{
	vec3 normal;
	vec3 localPoint = hitpoint - boxes[box_index].min;
	float min = 9999;
	vec3 extents = boxes[box_index].max - boxes[box_index].min;

	float dist = abs(extents.x - localPoint.x);
	if(dist < min)
	{
		min = dist;
		normal = sign(localPoint.x) * vec3(1, 0, 0);
	}

	dist = abs(extents.y - localPoint.y);
	if(dist < min)
	{
		min = dist;
		normal = sign(localPoint.y) * vec3(0, 1, 0);
	}

	dist = abs(extents.z - localPoint.z);
	if(dist < min)
	{
		min = dist;
		normal = sign(localPoint.z) * vec3(0, 0, 1);
	}

	return normal;
}

vec4 trace(vec3 origin, vec3 dir) {
	hitinfo info;

	dir = normalize(dir);

	// spheres
	if(intersectSpheres(origin, dir, info)) {
		vec3 hitpoint = origin + dir * info.lambda.x;
		vec3 normal = hitpoint - spheres[info.bi].center;

		normal = normalize(normal);

		//if(intersectSpheres(hitpoint, normal, info)) {
		//	vec4 color = vec4(0, 1, 0, 1);
		//	return color;
		//}
		//else {
		//	vec4 color = dot(normal, -dir) * vec4(1, 0, 0, 1);
		//	return color;
		//}

		vec3 viewDirection = hitpoint - eye;

		vec3 color = vec3(0, 0, 0);	// Ambient factor
		for(int i = 0; i < NUM_LIGHTS; i++) {
			vec3 diffuse = dot(normal, -lights[i].direction) * lights[i].color;

			vec3 specular = vec3(0, 0, 0);
			if(dot(normal, -lights[i].direction) < 0.0)
				specular = vec3(0, 0, 0);
			else
				specular = pow(max(0.0, dot(reflect(-lights[i].direction, normal), viewDirection)), 0.5f) * 0.05 * lights[i].color;		// 0.05 is the constant intensity

			color += diffuse + specular;
			
		}

		return vec4(color, 1.0f);		
	}

	// boxes
	if(intersectBoxes(origin, dir, info)) {
		vec3 hitpoint = origin + dir * info.lambda.x;

		// get the normal
		vec3 normal = calculateBoxNormal(hitpoint, info.bi);

		vec4 color = dot(normal, -dir) * vec4(1, 0, 0, 1);
		return color;
	}

	return vec4(0.3, 0.3, 0.3, 1.0);
}

void main(void) {
	ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(framebuffer);
	if (pix.x >= size.x || pix.y >= size.y) {
		return;
	}

	//ray00 

	vec2 pos = vec2(pix) / vec2(size.x, size.y);
	vec3 dir = mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x);

	vec4 color = trace(eye, dir);

	imageStore(framebuffer, pix, color);
}

/*
void main() {
	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
	float localCoef = length(vec2(ivec2(gl_LocalInvocationID.xy)-8)/8.0);
	float globalCoef = sin(float(gl_WorkGroupID.x+gl_WorkGroupID.y)*0.1 + time/500)*0.5;

	if(storePos.x < 1024/2)
		imageStore(framebuffer, storePos, vec4(sin(time/1000.0), sin(time/1000.0), 0.3, 1));//vec4(1.0 - globalCoef * localCoef, 0.0, 0.0, 0.0));
	else
		imageStore(framebuffer, storePos, vec4(1.0 - globalCoef * localCoef, 0.0, 0.0, 0.0));
}*/
