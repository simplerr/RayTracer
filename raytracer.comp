#version 450

uniform float time;

layout(binding = 0, rgba8) uniform image2D framebuffer;

layout (local_size_x = 16, local_size_y = 16) in;

uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;

// Light source
struct Light {
	vec3 position;
	vec3 direction;
	vec3 color;
	vec3 intensity;			// x = ambient, y = diffuse, z = specular
	int type;				// 0 = directional, 1 = point light, 2 = spot light
	float spot;
};

struct Box {
	vec3 min;
	vec3 max;
	vec3 material;
	float reflectivity;
};

struct Sphere {
	vec3 center;
	vec3 material;
	float radius;
	float reflectivity;
};

#define DIRECTIONAL_LIGHT 0
#define POINT_LIGHT 1 
#define SPOT_LIGHT 2

#define NUM_BOXES 6	
#define NUM_SPHERES 4
#define NUM_LIGHTS 1
#define MAX_SCENE_BOUNDS 100000.0
#define TRACE_DEPTH 3

float side = 50.0;

const Box boxes[] = {
	{vec3(0, -0.1, 0), vec3(side, 0.0, side), vec3(0.3, 0.3, 0.3), 1},
	{vec3(0, side , 0), vec3(side, side-0.1, side), vec3(0.5, 0, 0), 0},
	{vec3(-0.1, 0, 0), vec3(0, side, side), vec3(0, 0.5, 0), 0},
	{vec3(side, 0, 0), vec3(side-0.1, side, side), vec3(0.0, 0.0, 0.5), 0},
	{vec3(0, 0, -0.1), vec3(side, side, 0), vec3(0.5, 0.5, 0), 0},
	{vec3(0, 0, side), vec3(side, side, side-0.1), vec3(0, 0.5, 0.5), 0},
};

const Sphere spheres[] = {
	{vec3(side/2 + 5, 8, side/2 + 5), vec3(1, 0, 0), 1, 1},
	{vec3(side/2 - 10, 4, side/2 + 1), vec3(0, 1, 0), 2, 1},
	{vec3(side/2 + 5, 11, side/2 + 1), vec3(0, 0, 1), 0.5, 1},
	{vec3(side/2 + 10, 7, side/2 + 3), vec3(1, 1, 0), 0.5, 1}
};

const Light lights[] = {
	{vec3(side/2, 25, side/2), vec3(0, 0, 1), vec3(1, 1, 1), vec3(0.2, 1, 1), POINT_LIGHT, 10.0},
	{vec3(side/2, 25, 25), vec3(0, -1, 0), vec3(0, 0, 1), vec3(0.2, 1, 1), DIRECTIONAL_LIGHT, 10.0},
	//{vec3(side/2, 25, 25), vec3(1, -1, 1), vec3(0, 1, 0), vec3(0.2, 1, 1), DIRECTIONAL_LIGHT, 10.0}
};

struct hitinfo {
	vec2 lambda;
	int index;
	int type;			// 0 = sphere, 1 = box
	vec3 intersection;
	vec3 normal;
	vec3 eyeDirection;
	vec3 material;
	float reflectivity;
};

vec2 intersectBox(vec3 origin, vec3 dir, const Box b) {
	vec3 tMin = (b.min - origin) / dir;
	vec3 tMax = (b.max - origin) / dir;
	vec3 t1 = min(tMin, tMax);
	vec3 t2 = max(tMin, tMax);
	float tNear = max(max(t1.x, t1.y), t1.z);
	float tFar = min(min(t2.x, t2.y), t2.z);
	return vec2(tNear, tFar);
}

// Calculates the normal at the intersection point between a ray and a box
vec3 calculateBoxNormal(vec3 hitpoint, int box_index)
{
	vec3 normal;
	vec3 localPoint = hitpoint - boxes[box_index].min;
	float min = 9999;
	vec3 extents = boxes[box_index].max - boxes[box_index].min;

	float dist = abs(extents.x - localPoint.x);
	if(dist < min)
	{
		min = dist;
		normal = sign(localPoint.x) * vec3(1, 0, 0);
	}

	dist = abs(extents.y - localPoint.y);
	if(dist < min)
	{
		min = dist;
		normal = sign(localPoint.y) * vec3(0, 1, 0);
	}

	dist = abs(extents.z - localPoint.z);
	if(dist < min)
	{
		min = dist;
		normal = sign(localPoint.z) * vec3(0, 0, 1);
	}

	return normal;
}

bool intersectBoxes(vec3 origin, vec3 dir, out hitinfo info) {
	info.lambda = vec2(MAX_SCENE_BOUNDS, MAX_SCENE_BOUNDS);
	float closest = MAX_SCENE_BOUNDS;
	bool found = false;
	for (int i = 0; i < NUM_BOXES; i++) {
		vec2 lambda = intersectBox(origin, dir, boxes[i]);
		if (lambda.x > 0.0 && lambda.x < lambda.y && lambda.x < closest) {
			// Calculate hit information
			info.lambda = lambda;
			info.index = i;
			info.intersection = origin + dir * info.lambda.x;
			info.normal = calculateBoxNormal(info.intersection, info.index);
			info.material = boxes[i].material;
			info.type = 1;
			info.eyeDirection = normalize(eye - info.intersection);
			info.reflectivity = boxes[i].reflectivity;

			closest = lambda.x;
			found = true;
		}
	}
	return found;
}

bool intersectSpheres(vec3 origin, vec3 dir, out hitinfo info) {
	info.lambda = vec2(MAX_SCENE_BOUNDS, MAX_SCENE_BOUNDS);
	float closest = MAX_SCENE_BOUNDS;
	bool found = false;
	for (int i = 0; i < NUM_SPHERES; i++) 
	{
		float t0, t1;

		// geometric solution
        vec3 L = spheres[i].center - origin; 
        float tca = dot(L, dir); 
        if (tca < 0) 
			continue;

        float d2 = dot(L, L) - tca * tca; 

        if (d2 > pow(spheres[i].radius, 2)) 
			continue;

        float thc = sqrt(pow(spheres[i].radius, 2) - d2); 
        t0 = tca - thc; 
        t1 = tca + thc; 

		if(t0 < 0)
		{
			float tmp = t0;
			t0 = t1;
			t1 = tmp;

			if(t0 < 0)
				continue;
		}

		// Is it the closest sphere?
		if(t0 > 0.0 && t0 < t1 && t0 < closest) {
			// Calculate hit information
			info.lambda = vec2(t0, t1);
			info.index = i;
			info.intersection = origin + dir * info.lambda.x;
			info.normal = normalize(info.intersection - spheres[info.index].center);
			info.eyeDirection = normalize(eye - info.intersection);
			info.material = spheres[info.index].material;
			info.type = 0;
			info.reflectivity = spheres[info.index].reflectivity;

			// Update the closest distance
			closest = t0;
		}

		found = true;
	}

	return found;
}

bool closestObjectIntersection(vec3 origin, vec3 dir, out hitinfo info)
{
	// Check intersection with spheres
	hitinfo sphereInfo;
	bool sphereIntersection = intersectSpheres(origin, dir, sphereInfo);

	// Check intersection with boxes
	hitinfo boxInfo;
	bool boxIntersection = intersectBoxes(origin, dir, boxInfo);

	// No intersection
	if(!sphereIntersection && !boxIntersection)
		return false;

	// A sphere is closest
	if(sphereInfo.lambda.x < boxInfo.lambda.x)
	{
		info = sphereInfo;
		return true;
	}
	// A box is closest
	else if(boxInfo.lambda.x < sphereInfo.lambda.x)
	{
		info = boxInfo;
		return true;
	}
}

void ComputeLighting(vec3 material, Light light, vec3 intersection, vec3 normal, vec3 toEye, out vec3 ambient, out vec3 diffuse, out vec3 specular)
{
	vec3 lightVec;
	float lightDistance;
	
	if(light.type == DIRECTIONAL_LIGHT)		
		lightVec = normalize(-light.direction);	
	else			
	{
		lightVec = light.position - intersection;
		lightDistance = length(lightVec);
		lightVec = normalize(lightVec);
	}

	// [TODO] Out of range

	// Ambient
	ambient = material * light.color * light.intensity.x;		// [TODO]  Add light color
			
	// Diffuse
	float diffuseFactor = dot(lightVec, normal);

	if(diffuseFactor > 0.0f)
	{
		vec3 v = reflect(-lightVec, normal);
		float specularFactor = pow(max(dot(v, toEye), 0.0f), 32.0f);

		diffuse = diffuseFactor * material * light.color * light.intensity.y;
		specular = specularFactor * material * light.color * light.intensity.z;
	}

	if(light.type == POINT_LIGHT || light.type == SPOT_LIGHT)
	{
		// Scale by spotlight factor 
		float spot;
		if(light.type == 1)
			spot = 1.0;
		else if(light.type == 2)
			spot = pow(max(dot(-lightVec, light.direction), 0.0f), light.spot);

		// Attenuate
		vec3 tmpAtt = vec3(0.001f);
		float att = spot / dot(tmpAtt, vec3(1.0f, lightDistance, lightDistance*lightDistance));	// light.att

		ambient *= spot;
		diffuse *= att;
		specular *= att;
	}
}

float ComputeShadow(Light light, vec3 position, int index)
{
	float shadowFactor = 1.0;
	vec3 lightDirection;

	if(light.type == DIRECTIONAL_LIGHT)
		lightDirection = -light.direction;		// [NOTE] The - sign
	else
		lightDirection = light.position - position;

	lightDirection = normalize(lightDirection);
	hitinfo tmpIntersectInfo;
	if(closestObjectIntersection(position + lightDirection*1, lightDirection, tmpIntersectInfo) && tmpIntersectInfo.index != index)
	{
		// Obstructing object be infront of light source
		if(dot(tmpIntersectInfo.intersection - light.position, lightDirection) < 0)
			shadowFactor = 0.2;
	}
	return shadowFactor;
}

vec4 trace(vec3 origin, vec3 dir) {
	hitinfo intersectInfo;

	dir = normalize(dir);

	vec3 finalColor = vec3(0, 0, 0);
	float frac = 1.0;
	float parentReflectivity = 1.0;

	// Get first sphere intersecting the ray
	for(int bounce = 0; bounce < TRACE_DEPTH; bounce++)
	{
		if(closestObjectIntersection(origin, dir, intersectInfo)) 
		{
			// Ambient factor
			vec3 color = vec3(0, 0, 0);	

			for(int i = 0; i < NUM_LIGHTS; i++)
			{
				vec3 ambient = vec3(0.0);
				vec3 diffuse = vec3(0.0);
				vec3 specular = vec3(0.0);
				float shadowFactor = 1;

				// Shadow component
				shadowFactor = ComputeShadow(lights[i], intersectInfo.intersection, intersectInfo.index);

				ComputeLighting(intersectInfo.material, lights[i], intersectInfo.intersection, intersectInfo.normal, intersectInfo.eyeDirection, ambient, diffuse, specular);

				// Add to the final color
				finalColor += (ambient + diffuse + specular) * shadowFactor * parentReflectivity * frac;
				frac *= 0.4;
			}	

			// Calculate the reflection ray
			// Used in the next iteration
			float c1 = -dot(intersectInfo.normal, dir);
			dir = dir + (2*intersectInfo.normal*c1);
			origin = intersectInfo.intersection;

			parentReflectivity *= intersectInfo.reflectivity;

			// No need to keep looping if no reflection
			if(parentReflectivity == 0)
				break;
		}	
	}	// for TRACE_DEPTH

	return vec4(finalColor, 1.0);
}	

void main(void) 
{
	ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(framebuffer);
	if (pix.x >= size.x || pix.y >= size.y) {
		return;
	}

	vec2 pos = vec2(pix) / vec2(size.x, size.y);
	vec3 dir = mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x);

	vec4 color = trace(eye, dir);

	imageStore(framebuffer, pix, color);
}
