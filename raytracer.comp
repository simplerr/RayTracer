#version 450

layout(binding = 0, rgba8) uniform image2D framebuffer;

layout (local_size_x = 16, local_size_y = 16) in;

uniform float time;

uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;

struct Material
{
	vec3 color;
	float reflectivity;
	bool isDiffuse;
	int special;			// 0 = standard, 1 = checkers
};

// Light source
struct Light {
	vec3 position;
	vec3 direction;
	vec3 color;
	vec3 intensity;			// x = ambient, y = diffuse, z = specular
	int type;				// 0 = directional, 1 = point light, 2 = spot light
	float spot;
};

struct Box {
	vec3 min;
	vec3 max;
	Material material;
	//vec3 material;
	//float reflectivity;
	//bool isDiffuse;
};

struct Sphere {
	vec3 center;
	float radius;
	Material material;
	//float reflectivity;
	//bool isDiffuse;
};

#define DIRECTIONAL_LIGHT 0
#define POINT_LIGHT 1 
#define SPOT_LIGHT 2

#define NUM_BOXES 7	
#define NUM_SPHERES 4
#define NUM_LIGHTS 1
#define MAX_SCENE_BOUNDS 100000.0
#define TRACE_DEPTH 6

// Ray types 
#define DIFFUSE_RAY 0
#define REFLECTION_RAY 1
#define REFRACTION_RAY 2
#define SHADOW_RAY 5

// Uniforms
uniform int maxTraceDepth;
uniform int numLights;
uniform int numBoxes;
uniform int numSpheres;

uniform Light lightList[10];
uniform Sphere sphereList[10];
uniform Box boxList[10];

float side = 50.0;

//Box boxes[] = {
//	{vec3(0, -0.1, 0), vec3(side, 0.0, side), { vec3(0.3, 0.3, 0.3), 1, false }},
//	{vec3(0, side , 0), vec3(side, side-0.1, side), {vec3(0.5, 0, 0), 0, true}},
//	{vec3(-0.1, 0, 0), vec3(0, side, side), {vec3(0, 0.5, 0), 0, true}},
//	{vec3(side, 0, 0), vec3(side-0.1, side, side), {vec3(0.0, 0.0, 0.5), 0, true}},
//	{vec3(0, 0, -0.1), vec3(side, side, 0), {vec3(0.5, 0.5, 0), 0, true}},
//	{vec3(0, 0, side), vec3(side, side, side-0.1), {vec3(0, 0.5, 0.5), 0, true}},
//	{vec3(side/2, side/2, side/2), vec3(side/2 + 3, side/2 + 3, side/2 + 3), {vec3(1, 1, 1), 1, false}},
//};

//const Sphere spheres[] = {
//	{vec3(side/2 + 5, 8, side/2 + 5), 4, {vec3(1, 0, 0), 1, false}},
//	{vec3(side/2 - 10, 4, side/2 + 1), 3, {vec3(0, 0, 0), 0, false}},
//	{vec3(side/2 + 5, 11, side/2 + 1), 0.5, {vec3(0, 0, 1), 1, false}},
//	{vec3(side/2 + 10, 7, side/2 + 3), 0.5, {vec3(1, 1, 0), 1, true}}
//};

const Light lights[] = {
	{vec3(side/2, 25, side/2), vec3(0, 0, 1), vec3(1, 1, 1), vec3(0.2, 1, 1), POINT_LIGHT, 1.0},
	{vec3(side/2, 25, 25), vec3(0, -1, 0), vec3(0, 0, 1), vec3(0.2, 1, 1), DIRECTIONAL_LIGHT, 10.0},
	//{vec3(side/2, 25, 25), vec3(1, -1, 1), vec3(0, 1, 0), vec3(0.2, 1, 1), DIRECTIONAL_LIGHT, 10.0}
};

struct hitinfo {
	vec2 lambda;
	int index;
	int type;			// 0 = sphere, 1 = box, 2 = light
	vec3 intersection;
	vec3 normal;
	vec3 eyeDirection;
	vec3 material;
	float reflectivity;
	bool isDiffuse;
};

struct Ray
{
	vec3 origin;
	vec3 direction;
	int type;
};

struct Node {
	Ray ray;
	vec3 color;
	vec3 reflectionColor;
	vec3 refractionColor;
	float reflection;
	float refraction;
	int parent;
	int depth;
	bool isDiffuse;
};

// Instead of recursion a stack is used
Node stack[TRACE_DEPTH * 2 + 1];

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec2 intersectBox(vec3 origin, vec3 dir, const Box b) {
	vec3 tMin = (b.min - origin) / dir;
	vec3 tMax = (b.max - origin) / dir;
	vec3 t1 = min(tMin, tMax);
	vec3 t2 = max(tMin, tMax);
	float tNear = max(max(t1.x, t1.y), t1.z);
	float tFar = min(min(t2.x, t2.y), t2.z);
	return vec2(tNear, tFar);
}

// Calculates the normal at the intersection point between a ray and a box
vec3 calculateBoxNormal(vec3 hitpoint, int box_index)
{
	vec3 normal;
	vec3 localPoint = hitpoint - boxList[box_index].min;
	float min = 9999;
	vec3 extents = boxList[box_index].max - boxList[box_index].min;

	float dist = abs(extents.x - localPoint.x);
	if(dist < min)
	{
		min = dist;
		normal = sign(localPoint.x) * vec3(1, 0, 0);
	}

	dist = abs(extents.y - localPoint.y);
	if(dist < min)
	{
		min = dist;
		normal = sign(localPoint.y) * vec3(0, 1, 0);
	}

	dist = abs(extents.z - localPoint.z);
	if(dist < min)
	{
		min = dist;
		normal = sign(localPoint.z) * vec3(0, 0, 1);
	}

	return normal;
}

vec3 GetMaterialColor(vec3 position, Material material)
{
	if(material.special == 1)	// Checkers
	{
		int square = int(floor(position.x)) + int(floor(position.z));
		
		if(square % 2 == 0)
			return material.color;
		else
			return vec3(1);
	}	

	return material.color;
}

bool intersectBoxes(vec3 origin, vec3 dir, out hitinfo info) {
	info.lambda = vec2(MAX_SCENE_BOUNDS, MAX_SCENE_BOUNDS);
	float closest = MAX_SCENE_BOUNDS;
	bool found = false;
	for (int i = 0; i < numBoxes; i++) {
		vec2 lambda = intersectBox(origin, dir, boxList[i]);
		if (lambda.x > 0.0 && lambda.x < lambda.y && lambda.x < closest) {
			// Calculate hit information
			info.lambda = lambda;
			info.index = i;
			info.intersection = origin + dir * info.lambda.x;
			info.normal = calculateBoxNormal(info.intersection, info.index);
			info.material = GetMaterialColor(info.intersection, boxList[i].material);
			info.type = 1;
			info.eyeDirection = normalize(eye - info.intersection);
			info.reflectivity = boxList[i].material.reflectivity;
			info.isDiffuse = boxList[i].material.isDiffuse;

			closest = lambda.x;
			found = true;
		}
	}
	return found;
}

bool SphereIntersection(Sphere sphere, vec3 origin, vec3 dir, out vec2 lambda)
{
	float t0, t1;

	// geometric solution
    vec3 L = sphere.center - origin; 
    float tca = dot(L, dir); 
    if (tca < 0) 
		return false;

    float d2 = dot(L, L) - tca * tca; 

    if (d2 > pow(sphere.radius, 2)) 
		return false;

    float thc = sqrt(pow(sphere.radius, 2) - d2); 
    t0 = tca - thc; 
    t1 = tca + thc; 

	if(t0 < 0)
	{
		float tmp = t0;
		t0 = t1;
		t1 = tmp;

		if(t0 < 0)
			return false;
	}

	if (t0 > 0.0 && t0 < t1)
	{
		lambda.x = t0;
		lambda.y = t1;
		return true;
	}

	return false;
}

bool intersectSpheres(vec3 origin, vec3 dir, out hitinfo info) {
	info.lambda = vec2(MAX_SCENE_BOUNDS, MAX_SCENE_BOUNDS);
	float closest = MAX_SCENE_BOUNDS;
	bool found = false;
	for (int i = 0; i < numSpheres; i++) 
	{
		vec2 lambda;

		// Is it the closest sphere?
		if(SphereIntersection(sphereList[i], origin, dir, lambda) && lambda.x < closest) {
			// Calculate hit information
			info.lambda = lambda;//vec2(t0, t1);
			info.index = i;
			info.intersection = origin + dir * info.lambda.x;
			info.normal = normalize(info.intersection - sphereList[info.index].center);
			info.eyeDirection = normalize(eye - info.intersection);
			info.material = GetMaterialColor(info.intersection, sphereList[info.index].material);
			info.type = 0;
			info.reflectivity = sphereList[info.index].material.reflectivity;
			info.isDiffuse = sphereList[info.index].material.isDiffuse;

			// Update the closest distance
			closest = lambda.x;
		}

		found = true;
	}

	return found;
}

bool IntersectLights(vec3 origin, vec3 dir, out float dist)
{
	dist = MAX_SCENE_BOUNDS;

	for (int i = 0; i < numLights; i++) 
	{
		vec2 lambda;

		// Is it the closest sphere?
		Sphere sphere = {lightList[i].position, 1, {vec3(1, 0, 0), 1, true, 0}};
		if(SphereIntersection(sphere, origin, dir, lambda))
		{
			dist = lambda.x;
			return true;
		}
	}

	return false;
}

bool closestObjectIntersection(vec3 origin, vec3 dir, out hitinfo info)
{
	// Check intersection with spheres
	hitinfo sphereInfo;
	bool sphereIntersection = intersectSpheres(origin, dir, sphereInfo);

	// Check intersection with boxes
	hitinfo boxInfo;
	bool boxIntersection = intersectBoxes(origin, dir, boxInfo);

	// [NOTE][TODO] Temporary
	float lightDist = MAX_SCENE_BOUNDS;
	bool lightIntersection = IntersectLights(origin, dir, lightDist);

	// No intersection
	if(!sphereIntersection && !boxIntersection && !lightIntersection)
		return false;

	// A sphere is closest
	if(sphereInfo.lambda.x < boxInfo.lambda.x && sphereInfo.lambda.x < lightDist)
	{
		info = sphereInfo;
		return true;
	}
	// A box is closest
	else if(boxInfo.lambda.x < sphereInfo.lambda.x && boxInfo.lambda.x < lightDist)
	{
		info = boxInfo;
		return true;
	}
	else if(lightIntersection)
	{
		info.type = 2;
		return true;
	}
}

void ComputeLighting(vec3 material, Light light, vec3 intersection, vec3 normal, vec3 toEye, out vec3 ambient, out vec3 diffuse, out vec3 specular)
{
	vec3 lightVec;
	float lightDistance;
	
	if(light.type == DIRECTIONAL_LIGHT)		
		lightVec = normalize(-light.direction);	
	else			
	{
		lightVec = light.position - intersection;
		lightDistance = length(lightVec);
		lightVec = normalize(lightVec);
	}

	// [TODO] Out of range

	// Ambient
	ambient = material * light.color * light.intensity.x;		// [TODO]  Add light color
			
	// Diffuse
	float diffuseFactor = dot(lightVec, normal);

	if(diffuseFactor > 0.0f)
	{
		vec3 v = reflect(-lightVec, normal);
		float specularFactor = pow(max(dot(v, toEye), 0.0f), 256.0f);

		diffuse = diffuseFactor * material * light.color * light.intensity.y;
		specular = specularFactor * material * light.color * light.intensity.z;
	}

	if(light.type == POINT_LIGHT || light.type == SPOT_LIGHT)
	{
		// Scale by spotlight factor 
		float spot;
		if(light.type == 1)
			spot = 1.0;
		else if(light.type == 2)
			spot = pow(max(dot(-lightVec, light.direction), 0.0f), light.spot);

		// Attenuate
		vec3 tmpAtt = vec3(0.001f);
		float att = spot / dot(tmpAtt, vec3(1.0f, lightDistance, lightDistance*lightDistance));	// light.att

		ambient *= spot;
		diffuse *= att;
		specular *= att;
	}
}

float ComputeShadow(Light light, vec3 position, int index)
{
	float shadowFactor = 0.0;
	vec3 lightDirection;

	if(light.type == DIRECTIONAL_LIGHT)
		lightDirection = -light.direction;		// [NOTE] The - sign
	else
		lightDirection = light.position - position;


	int samples = 5;
	for(int i = 0; i < samples; i++)
	{
		vec2 co = vec2(i/2, i%2);
		vec3 aliasingPos = position + vec3(2*rand(co) - 1, 2*rand(co) - 1, 2*rand(co) - 1) / vec3(10);
		vec3 aliasingDir = normalize(lightDirection  + vec3(2*rand(co) - 1, 2*rand(co) - 1, 2*rand(co) - 1) / vec3(10));

		hitinfo tmpIntersectInfo;
		if(closestObjectIntersection(aliasingPos + aliasingDir*1, aliasingDir, tmpIntersectInfo)) // && tmpIntersectInfo.index != index
		{
			// Obstructing object be infront of light source
			if(dot(tmpIntersectInfo.intersection - light.position, aliasingDir) < 0)
				shadowFactor += 0.8 / samples;// / samples;
		}
	}


	//lightDirection = normalize(lightDirection);
	
	return shadowFactor;
}

vec3 CalculateColor(hitinfo intersectInfo)
{
	vec3 finalColor = vec3(0);

	if(intersectInfo.type == 2)	// Light
		return vec3(1, 1, 0);

	for(int i = 0; i < numLights; i++)
	{
		vec3 ambient = vec3(0.0);
		vec3 diffuse = vec3(0.0);
		vec3 specular = vec3(0.0);
		float shadowFactor = 1;

		// Shadow component
		shadowFactor = ComputeShadow(lightList[i], intersectInfo.intersection, intersectInfo.index);

		ComputeLighting(intersectInfo.material, lightList[i], intersectInfo.intersection, intersectInfo.normal, intersectInfo.eyeDirection, ambient, diffuse, specular);

		// Add to the final color
		finalColor += (ambient + diffuse + specular) * (1 - shadowFactor);// * parentReflectivity * frac;
		//finalColor = vec3(0, 1, 0);
		//frac *= 0.4;
	}

	return finalColor;
}

vec3 RayTrace(Ray ray)
{
	int currentNode = 0;
	int numNodes = 1;		// Works as stack pointer	

	float frac = 1.0;
	
	// Start with only the primary ray
	stack[currentNode].ray = ray;		
	stack[currentNode].depth = 1;

	for(currentNode = 0; currentNode < numNodes; currentNode++)
	{
		// Find closest object intersecting the ray
		hitinfo intersectInfo;
		if(closestObjectIntersection(stack[currentNode].ray.origin, stack[currentNode].ray.direction, intersectInfo)) 
		{
			// Only create new rays if max depth isn't exceeded
			if(!intersectInfo.isDiffuse && intersectInfo.type != 2 && stack[currentNode].depth < maxTraceDepth) // && 0 == 1
			{
				//stack[currentNode].color = vec3(1, 0, 0);
				stack[currentNode].isDiffuse = false;
				stack[currentNode].refraction = 1.0;
				stack[currentNode].reflection = intersectInfo.reflectivity;

				// Add reflection ray to top of the stack
				vec3 reflection = reflect(stack[currentNode].ray.direction, intersectInfo.normal);
				stack[numNodes + 0].ray = Ray(intersectInfo.intersection, reflection, REFLECTION_RAY);

				// Add refraction ray to top of the stack
				vec3 refraction = refract(stack[currentNode].ray.direction, intersectInfo.normal, 0.99); // [NOTE] 0.98 is temp
				stack[numNodes + 1].ray = Ray(intersectInfo.intersection + refraction, refraction, REFRACTION_RAY);

				// Set depth and parent on the new rays
				stack[numNodes + 0].depth = stack[currentNode].depth + 1;
				stack[numNodes + 0].parent = currentNode;
				stack[numNodes + 1].depth = stack[currentNode].depth + 1;			
				stack[numNodes + 1].parent = currentNode;

				// Two new rays added
				numNodes += 2;

				// [TODO] Compute the diffuse color even if it reflects and refracts
			}
			// Max depth reached or 100% diffuse, calculate color
			else
			{	
				stack[currentNode].color = CalculateColor(intersectInfo);
				stack[currentNode].isDiffuse = true;
			}
		}
		else
		{
			// Ray didn't hit anything, set node color to black
			stack[currentNode].color = vec3(1, 1, 1);
			stack[currentNode].isDiffuse = true;
		}
	}	
	
	// Loop backwards over all nodes and update the parents colors
	for(int child = currentNode - 1; child > 0; child--)
	{
		vec3 color = stack[child].color;
		int parent = stack[child].parent;

		// [NOTE] Missing somehting here	
		// [TODO] This should also combine refraction and reflection
		if(!stack[child].isDiffuse)
			color = stack[child].refractionColor * (1.0 - stack[child].reflection) + stack[child].reflectionColor * stack[child].reflection;

		if(stack[child].ray.type == REFLECTION_RAY)
			stack[parent].reflectionColor = color;
		else if(stack[child].ray.type == REFRACTION_RAY)
			stack[parent].refractionColor = color;
	}		

	Node primaryNode = stack[0];
	if(primaryNode.isDiffuse)
		return primaryNode.color;
	else
	{
		// Fresnel equation
		//return primaryNode.refractionColor;//vec3(1, 0, 0);//primaryNode.color;
		return primaryNode.refractionColor * (1.0 - primaryNode.reflection) + primaryNode.reflectionColor * primaryNode.reflection;
	}

	//return vec4(stack[0].color, 1.0);
	//return vec4(finalColor, 1.0);	
}

vec4 trace(Ray ray) {
	hitinfo intersectInfo;

	//dir = normalize(dir);

	vec3 finalColor = vec3(0, 0, 0);
	float frac = 1.0;
	float parentReflectivity = 1.0;

	// Get first sphere intersecting the ray
	for(int bounce = 0; bounce < TRACE_DEPTH; bounce++)
	{
		if(closestObjectIntersection(ray.origin, ray.direction, intersectInfo)) 
		{
			// Ambient factor
			vec3 color = vec3(0, 0, 0);	

			for(int i = 0; i < NUM_LIGHTS; i++)
			{
				vec3 ambient = vec3(0.0);
				vec3 diffuse = vec3(0.0);
				vec3 specular = vec3(0.0);
				float shadowFactor = 1;

				// Shadow component
				shadowFactor = ComputeShadow(lights[i], intersectInfo.intersection, intersectInfo.index);

				ComputeLighting(intersectInfo.material, lights[i], intersectInfo.intersection, intersectInfo.normal, intersectInfo.eyeDirection, ambient, diffuse, specular);

				//specular = vec3(0);

				// Add to the final color
				finalColor += (ambient + diffuse + specular) * shadowFactor * parentReflectivity * frac;
				frac *= 1.0;//0.4;
			}	

			// Calculate the reflection ray
			vec3 reflection = reflect(ray.direction, intersectInfo.normal);
			ray = Ray(intersectInfo.intersection, reflection, REFLECTION_RAY);

			// Calculate the refraction ray
			vec3 refraction = refract(ray.direction, intersectInfo.normal, 0.98); // [NOTE] 0.98 is temp
			ray = Ray(intersectInfo.intersection + refraction, refraction, REFRACTION_RAY);

			parentReflectivity *= intersectInfo.reflectivity;

			// No need to keep looping if no reflection
			if(parentReflectivity == 0)
				break;
		}	
	}	// for TRACE_DEPTH

	return vec4(finalColor, 1.0);
}	

void main(void) 
{
	ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(framebuffer);
	if (pix.x >= size.x || pix.y >= size.y) {
		return;
	}

	vec2 pos = vec2(pix) / vec2(size.x, size.y);
	vec3 dir = mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x);

	vec3 finalColor = vec3(0);

	int samples = 1;
	for(int i = 0; i < samples; i++)
	{
		vec2 co = vec2(i/2, i%2);
		vec3 aliasing = normalize(dir  + vec3(2*rand(co) - 1, 2*rand(co) - 1, 2*rand(co) - 1) / vec3(1000));
		Ray ray = {eye, aliasing, 0};
		finalColor += vec3(RayTrace(ray)) / samples;
	}

	Ray ray = {eye, normalize(dir), 0};
	//vec4 color = vec4(RayTrace(ray), 1.0);
	//vec4 color = trace(ray);

	vec4 color = vec4(finalColor, 1.0);

	imageStore(framebuffer, pix, color);
}
